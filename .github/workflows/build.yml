name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cmake-version: [3.12]
        compiler: [clang-9]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libusb-1.0-0-dev
    - name: Get commit count
      id: get_commit_count
      run: echo ::set-output name=commit_count::$(git rev-list $(git describe --abbrev=0 --tags)..HEAD --count)
    - name: Set version
      id: set_version
      run: echo ::set-output name=version::${{ steps.get_latest_tag.outputs.latest_tag }}.${{ steps.get_commit_count.outputs.commit_count }}
    - name: Build
      run: |
        mkdir build
        cd build
        cmake -DVERSION=${{ steps.set_version.outputs.version }} ..
        make
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        release_name: Release ${{ steps.set_version.outputs.version }}
        draft: true
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libusb_control_transfer_demo
        asset_name: libusb_control_transfer_demo
        asset_content_type: application/octet-stream
windows:

    name: Windows

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch: [i686, x86_64]

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get install gcc-mingw-w64 binutils-mingw-w64 mingw-w64-tools
      - name: Install libusb
        env:
          LIBUSB_VERSION: 1.0.26
        run: |
          wget -c https://github.com/libusb/libusb/archive/refs/tags/v${LIBUSB_VERSION}.tar.gz
          tar xzf v${LIBUSB_VERSION}.tar.gz
          pushd libusb-${LIBUSB_VERSION}
          autoreconf --install --force
          ./configure --host=${{ matrix.arch }}-w64-mingw32 --prefix=/usr
          make
          make install DESTDIR=$PWD/../artifacts
          popd
      - name: Install hidapi
        env:
          HIDAPI_VERSION: 0.12.0
        run: |
          wget -c https://github.com/libusb/hidapi/archive/refs/tags/hidapi-${HIDAPI_VERSION}.tar.gz
          tar xzf hidapi-${HIDAPI_VERSION}.tar.gz
          pushd hidapi-hidapi-${HIDAPI_VERSION}
          autoreconf --install --force
          ./configure --host=${{ matrix.arch }}-w64-mingw32 --prefix=/usr LDFLAGS='-static-libgcc'
          make
          make install DESTDIR=$PWD/../artifacts
          popd
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -DVERSION=${{ steps.set_version.outputs.version }} .. -G "MinGW Makefiles"
          mingw32-make
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          release_name: Release ${{ steps.set_version.outputs.version }}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libusb_control_transfer_demo.exe
          asset_name: libusb_control_transfer_demo.exe
          asset_content_type: application/octet-stream

          
 
